<?php
class DotLexer
{

    private $data;
    public $counter;
    public $token;
    public $value;
    public $node;
    public $line;
    private $state = 1;

    function __construct($data)
    {
        $this->data = $data;
        $this->counter = 0;
        $this->line = 1;
    }

/*!lex2php
%input $this->data
%counter $this->counter
%token $this->token
%value $this->value
%line $this->line

digraph = "digraph "
subgraph = "subgraph "
id = /[a-zA-Z0-9_.()]+([a-zA-Z0-9_.()]*)?/
openBrace = /\{/
closeBrace = /\}/
openAttr = /\[/
closeAttr = /\]/
equals = /\=/
quotmark = /\"/
puncmark = /\,/
semicolon = /\;/
edgeop = /\->/
newLine = /\n/
other = /./
*/

/*!lex2php
%statename START
digraph {
  $this->token = DotParser::TP_DIGRAPH;
//  echo "digraph: ".$this->value."<br />";
}
subgraph {
  $this->token = DotParser::TP_SUBGRAPH;
//  echo "subgraph: ".$this->value."<br />";
}
id {
  $this->token = DotParser::TP_ID;
//  echo "id: ".$this->value."<br />";
}
openBrace {
  $this->token = DotParser::TP_OPENBRACE;
//  echo "openBrace: ".$this->value."<br />";
}
closeBrace {
  $this->token = DotParser::TP_CLOSEBRACE;
//  echo "closeBrace: ".$this->value."<br />";
}
openAttr {
  $this->token = DotParser::TP_OPENATTR;
}
closeAttr {
  $this->token = DotParser::TP_CLOSEATTR;
}
equals {
  $this->token = DotParser::TP_EQUALS;
}
quotmark {
  $this->token = DotParser::TP_QUOTMARK;
}
puncmark {
  $this->token = DotParser::TP_PUNCMARK;
}
semicolon {
	return false;
//  $this->token = DotParser::TP_SEMICOLON;
//  echo "semicolon: ".$this->value."<br />";
}
edgeop {
  $this->token = DotParser::TP_EDGEOP;
//  echo "edgeop: ".$this->value."<br />";
}
newLine {
  return false;
}
other {
  return false;
}
*/
}